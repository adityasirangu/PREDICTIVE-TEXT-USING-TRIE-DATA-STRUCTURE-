#include <ios>
#include<iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <stdio.h>
using namespace std; 


#define ALPHABET_SIZE (26) 
#define CHAR_TO_INDEX(c) ((int)c - (int)'a') 

struct TrieNode 
{ 
    struct TrieNode *children[ALPHABET_SIZE]; 
    bool isWordEnd; 
}; 

struct TrieNode *getNode(void) 
{ 
    struct TrieNode *pNode = new TrieNode; 
    pNode->isWordEnd = false; 

    for (int i = 0; i < ALPHABET_SIZE; i++) 
        pNode->children[i] = NULL; 

    return pNode; 
} 

void insert(struct TrieNode *root,  const string key) 
{ 
    struct TrieNode *pCrawl = root; 

    for (int level = 0; level < key.length(); level++) 
    { 
        int index = CHAR_TO_INDEX(key[level]); 
        if (!pCrawl->children[index]) 
            pCrawl->children[index] = getNode(); 

        pCrawl = pCrawl->children[index]; 
    } 


    pCrawl->isWordEnd = true; 
} 


bool search(struct TrieNode *root, const string key) 
{ 
    int length = key.length(); 
    struct TrieNode *pCrawl = root; 
    for (int level = 0; level < length; level++) 
    { 
        int index = CHAR_TO_INDEX(key[level]); 

        if (!pCrawl->children[index]) 
            return false; 

        pCrawl = pCrawl->children[index]; 
    } 

    return (pCrawl != NULL && pCrawl->isWordEnd); 
} 


bool isLastNode(struct TrieNode* root) 
{ 
    for (int i = 0; i < ALPHABET_SIZE; i++) 
        if (root->children[i]) 
            return 0; 
    return 1; 
} 


void suggestionsRec(struct TrieNode* root, string currPrefix) 
{ 

    if (root->isWordEnd) 
    { 
        cout << "\t\t"<<currPrefix; 
        cout << endl; 
    } 


    if (isLastNode(root)) 
        return; 
    string x=currPrefix;

    for (int i = 0; i < ALPHABET_SIZE; i++) 
    { 
        currPrefix=x;
        if (root->children[i]) 
        { 
            currPrefix.push_back(97 + i); 


            suggestionsRec(root->children[i], currPrefix); 
        } 
    } 
} 

int printAutoSuggestions(TrieNode* root, const string query) 
{ 
    struct TrieNode* pCrawl = root; 

    int level; 
    int n = query.length(); 
    for (level = 0; level < n; level++) 
    { 
        int index = CHAR_TO_INDEX(query[level]); 


        if (!pCrawl->children[index]) 
            return 0; 

        pCrawl = pCrawl->children[index]; 
    } 

    bool isWord = (pCrawl->isWordEnd == true); 

    bool isLast = isLastNode(pCrawl); 


    if (isWord && isLast) 
    { 
        cout << query << endl; 
        return -1; 
    } 

    if (!isLast) 
    { 
        string prefix = query; 
        suggestionsRec(pCrawl, prefix); 
        return 1; 
    } 
} 


int main() 
{ 
    int s=0;
	while(s!=3)
	{
	
	struct TrieNode* root = getNode();
    string x;
    string line;

    int a;
    cout<<"Welcome to our Search Engine "<<endl; 
    cout<<"Commands:\n\t1)Search\n\t2)History\n\t3)Exit\n";
    cout<<"Enter the command : ";
    cin>>s;
    fstream myfile2 ("history.txt");
    fstream myfile ("project.txt");
    switch(s){

    case 2 :
	myfile.close();
	    if (myfile2.is_open())
	    {
		a=0;
		cout << "The recent history : "<<endl;
		while ((! myfile2.eof())&&(a<5))
		{
				getline (myfile2,line);
				cout<< "\t"<<line<<endl;
				a++;
				
		}
         myfile2.close();
		
	    }
	    cout<<"\n";
	    break;
    case 1 :	
	
            cout<<"Start Searching !: ";
            cin>>x;
            string hist[6];
            string line;
            for (a=0;a<6;a++)
            getline(myfile2,hist[a]);
            myfile2<<endl;
	        myfile2<<"\n"<< x;
            myfile2.close();

            fstream myfile3;
            myfile3.open("history.txt", ios::out | ios::trunc);
            myfile3<<x<<endl;
            for (a=0;a<6;a++)
	myfile3<<hist[a]<<endl;
	
            myfile3.close();
            int c=0;


	
	if (myfile.is_open())
	{
		while (! myfile.eof())
		{	
				getline (myfile,line);
				insert(root,line);
                                if(x==line)
                                c+=1;
		}
                 myfile.close();
		
	}

            if(c==0)
            {

            cout <<"Is it a word?? (if yes press 1 else press 0) : " ;
            cin>>a;
            if(a==1)
            {
            fstream myfile ("project.txt",ios::out | ios::app);
            myfile<<endl;
	myfile<< x;
            myfile.close();

            }
            }
            cout << "The matching words are : "<<endl;
            int comp = printAutoSuggestions(root, x); 


    if (comp == -1) 
        cout << "No other strings found with this prefix\n"; 

    else if (comp == 0) 
        cout << "No string found with this prefix\n"; 
    cout<<"\n";
    break;
    return 0; 
}
}
}
